#!/bin/sh
#
# Simple Bourne Shell script that implements Munin protocol and 
# some common Linux plugins.
#
# For latest ORIGINAL version, see http://muninlite.sf.net/
# For latest FORKED version, see https://github.com/TortugaLabs/muninlite
#
# Copyright (c) 2007-2011 Rune Nordbøe Skillingstad <rune@skillingstad.no>
# Copyright (c) 2019 A Liu Ly
# 
# Licensed under GPLv2 (see LICENSE file for full License)
#
set -euf -o pipefail

VERSION="@@VERSION@@"

if [ -f /etc/openwrt_release ] ; then
  HOSTNAME=$(/sbin/uci get "system.@system[0].hostname" 2>/dev/null || cat /proc/sys/kernel/hostname)
else
  #HOSTNAME=$(hostname -f 2>/dev/null || hostname)
  HOSTNAME=$(hostname)
fi

[ -z "${PLUGINS:-}" ] && PLUGINS="cpu df forks interrupts load memory netbps neterr processes proc_pri sensors"
NODES="$HOSTNAME"

# ===== LIB FUNCTIONS =====
clean_fieldname() {
  echo "$@" | sed -e 's/^[^A-Za-z_]/_/' -e 's/[^A-Za-z0-9_]/_/g'
}

# Check if plugin is enabled...
is_plugin_enabled() {
  echo "$PLUGINS" | grep -q "\b$1\b"
}
remove_plugin() {
  local new="" i q=""
  for i in $PLUGINS
  do
    if [ $i = "$1" ] ; then
      continue
    fi
    new="$new$q$i"
    q=" "
  done
  PLUGINS="$new"
}
add_plugin() {
  PLUGINS=$(echo $PLUGINS $1 | tr ' ' '\n' | sort -u|tr '\n' ' ')
}
check_fn() {
  type "$1" >/dev/null 2>&1
}
make_id() {
  echo -n "$*" | tr -c '_A-Za-z0-9' _
}

check_service() {
  check_fn config_"${1}" || return 1
  check_fn fetch_"${1}" || return 1
  # Check if it is a valid plugin on the default node
  (echo "$PLUGINS" | grep -q "\b${1}\b") && return 0
  # Otherwise check nodes...
  local node
  for node in $NODES
  do
    local n=$(make_id "$node")
    check_fn node_"$n" || continue
    (node_"$n" | grep -q "\b${1}\b") && return 0
  done
  return 1
}

# ===== MUNIN-NODE PROTOCOL FUNCTIONS =====

do_list() {
  if [ $# -gt 0 ] ; then
    local n=$(make_id "$1")
    if check_fn "node_${n}" ; then
      "node_${n}"
      return $?
    fi
  fi
  echo "$PLUGINS"
}

do_nodes() {
  echo "$NODES"
  echo "."
}

do_config() {
  if check_service "${1}" ; then
    "config_${1}"
  else
    echo "# Unknown service"
  fi
  echo "."
}

do_fetch() {
  if check_service "${1}" ; then
    "fetch_${1}"
  else
    echo "# Unknow service"
  fi
  echo "."
}

do_version() {
  echo "munins node on $HOSTNAME version: $VERSION (munin-lite)"
}

do_quit() {
  exit 0
}

main_loop() {
  FUNCTIONS="list nodes config fetch version quit"
  echo "# munin node at $HOSTNAME"
  while read arg0 arg1 
  do 
    arg0=$(echo "$arg0" | xargs)
    arg1=$(echo "$arg1" | xargs)
    if [ -z "$arg0" ] ; then
      continue
    fi
    if ! echo "$FUNCTIONS" | grep "\b$arg0\b" >/dev/null 2>&1 ; then
      echo "# Unknown command. Try" $(echo "$FUNCTIONS" | sed -e 's/\( [[:alpha:]]\{1,\}\)/,\1/g' -e 's/,\( [[:alpha:]]\{1,\}\)$/ or\1/')
      continue
    fi
    "do_$arg0" $arg1
  done 
}

# ===== COMMON LIB FUNCTIONS ====

select_net_devs() {
  grep '^ *[a-zA-Z0-9]\([^:]\)\{1,\}:' /proc/net/dev | cut -f1 -d: | sed 's/ //g' | while read dev
  do
    [ -z "$dev" ] && continue || :
    if [ x"$dev" = x"lo" ] ; then
      continue
    fi
    echo "$dev"
  done
}

clean_net_dev_name() {
  echo "$@" | sed -e 's/\./VLAN/' -e 's/^[^A-Za-z_]/_/' -e 's/[^A-Za-z0-9_]/_/g'
}

# ===== RUN-TIME CONFIGURATION ====
if [ -f /etc/muninlite.conf ] ; then
  . /etc/muninlite.conf
fi

